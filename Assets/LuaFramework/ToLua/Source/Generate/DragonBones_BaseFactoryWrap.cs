//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DragonBones_BaseFactoryWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DragonBones.BaseFactory), typeof(System.Object));
		L.RegFunction("ParseDragonBonesData", ParseDragonBonesData);
		L.RegFunction("ParseTextureAtlasData", ParseTextureAtlasData);
		L.RegFunction("UpdateTextureAtlasData", UpdateTextureAtlasData);
		L.RegFunction("GetDragonBonesData", GetDragonBonesData);
		L.RegFunction("AddDragonBonesData", AddDragonBonesData);
		L.RegFunction("RemoveDragonBonesData", RemoveDragonBonesData);
		L.RegFunction("GetTextureAtlasData", GetTextureAtlasData);
		L.RegFunction("AddTextureAtlasData", AddTextureAtlasData);
		L.RegFunction("RemoveTextureAtlasData", RemoveTextureAtlasData);
		L.RegFunction("GetArmatureData", GetArmatureData);
		L.RegFunction("Clear", Clear);
		L.RegFunction("BuildArmature", BuildArmature);
		L.RegFunction("ReplaceDisplay", ReplaceDisplay);
		L.RegFunction("ReplaceSlotDisplay", ReplaceSlotDisplay);
		L.RegFunction("ReplaceSlotDisplayList", ReplaceSlotDisplayList);
		L.RegFunction("ReplaceSkin", ReplaceSkin);
		L.RegFunction("ReplaceAnimation", ReplaceAnimation);
		L.RegFunction("GetAllDragonBonesData", GetAllDragonBonesData);
		L.RegFunction("GetAllTextureAtlasData", GetAllTextureAtlasData);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("autoSearch", get_autoSearch, set_autoSearch);
		L.RegVar("_dragonBones", get__dragonBones, set__dragonBones);
		L.RegVar("clock", get_clock, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseDragonBonesData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				DragonBones.DragonBonesData o = obj.ParseDragonBonesData(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				DragonBones.DragonBonesData o = obj.ParseDragonBonesData(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				DragonBones.DragonBonesData o = obj.ParseDragonBonesData(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.ParseDragonBonesData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseTextureAtlasData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				System.Collections.Generic.Dictionary<string,object> arg0 = (System.Collections.Generic.Dictionary<string,object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,object>));
				object arg1 = ToLua.ToVarObject(L, 3);
				DragonBones.TextureAtlasData o = obj.ParseTextureAtlasData(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				System.Collections.Generic.Dictionary<string,object> arg0 = (System.Collections.Generic.Dictionary<string,object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,object>));
				object arg1 = ToLua.ToVarObject(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				DragonBones.TextureAtlasData o = obj.ParseTextureAtlasData(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				System.Collections.Generic.Dictionary<string,object> arg0 = (System.Collections.Generic.Dictionary<string,object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,object>));
				object arg1 = ToLua.ToVarObject(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				DragonBones.TextureAtlasData o = obj.ParseTextureAtlasData(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.ParseTextureAtlasData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateTextureAtlasData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Collections.Generic.List<object> arg1 = (System.Collections.Generic.List<object>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<object>));
			obj.UpdateTextureAtlasData(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDragonBonesData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			DragonBones.DragonBonesData o = obj.GetDragonBonesData(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDragonBonesData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.DragonBonesData arg0 = (DragonBones.DragonBonesData)ToLua.CheckObject<DragonBones.DragonBonesData>(L, 2);
				obj.AddDragonBonesData(arg0);
				return 0;
			}
			else if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.DragonBonesData arg0 = (DragonBones.DragonBonesData)ToLua.CheckObject<DragonBones.DragonBonesData>(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.AddDragonBonesData(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.AddDragonBonesData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveDragonBonesData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.RemoveDragonBonesData(arg0);
				return 0;
			}
			else if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.RemoveDragonBonesData(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.RemoveDragonBonesData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextureAtlasData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Collections.Generic.List<DragonBones.TextureAtlasData> o = obj.GetTextureAtlasData(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTextureAtlasData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.TextureAtlasData arg0 = (DragonBones.TextureAtlasData)ToLua.CheckObject<DragonBones.TextureAtlasData>(L, 2);
				obj.AddTextureAtlasData(arg0);
				return 0;
			}
			else if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.TextureAtlasData arg0 = (DragonBones.TextureAtlasData)ToLua.CheckObject<DragonBones.TextureAtlasData>(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.AddTextureAtlasData(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.AddTextureAtlasData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveTextureAtlasData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.RemoveTextureAtlasData(arg0);
				return 0;
			}
			else if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.RemoveTextureAtlasData(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.RemoveTextureAtlasData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetArmatureData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				DragonBones.ArmatureData o = obj.GetArmatureData(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				DragonBones.ArmatureData o = obj.GetArmatureData(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.GetArmatureData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				obj.Clear();
				return 0;
			}
			else if (count == 2)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Clear(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.Clear");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BuildArmature(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				DragonBones.Armature o = obj.BuildArmature(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				DragonBones.Armature o = obj.BuildArmature(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				DragonBones.Armature o = obj.BuildArmature(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				DragonBones.Armature o = obj.BuildArmature(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.BuildArmature");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceDisplay(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.Slot arg0 = (DragonBones.Slot)ToLua.CheckObject<DragonBones.Slot>(L, 2);
				DragonBones.DisplayData arg1 = (DragonBones.DisplayData)ToLua.CheckObject<DragonBones.DisplayData>(L, 3);
				obj.ReplaceDisplay(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.Slot arg0 = (DragonBones.Slot)ToLua.CheckObject<DragonBones.Slot>(L, 2);
				DragonBones.DisplayData arg1 = (DragonBones.DisplayData)ToLua.CheckObject<DragonBones.DisplayData>(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.ReplaceDisplay(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.ReplaceDisplay");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceSlotDisplay(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				DragonBones.Slot arg4 = (DragonBones.Slot)ToLua.CheckObject<DragonBones.Slot>(L, 6);
				bool o = obj.ReplaceSlotDisplay(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 7)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				DragonBones.Slot arg4 = (DragonBones.Slot)ToLua.CheckObject<DragonBones.Slot>(L, 6);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
				bool o = obj.ReplaceSlotDisplay(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.ReplaceSlotDisplay");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceSlotDisplayList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			DragonBones.Slot arg3 = (DragonBones.Slot)ToLua.CheckObject<DragonBones.Slot>(L, 5);
			bool o = obj.ReplaceSlotDisplayList(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceSkin(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.Armature arg0 = (DragonBones.Armature)ToLua.CheckObject<DragonBones.Armature>(L, 2);
				DragonBones.SkinData arg1 = (DragonBones.SkinData)ToLua.CheckObject<DragonBones.SkinData>(L, 3);
				bool o = obj.ReplaceSkin(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.Armature arg0 = (DragonBones.Armature)ToLua.CheckObject<DragonBones.Armature>(L, 2);
				DragonBones.SkinData arg1 = (DragonBones.SkinData)ToLua.CheckObject<DragonBones.SkinData>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				bool o = obj.ReplaceSkin(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.Armature arg0 = (DragonBones.Armature)ToLua.CheckObject<DragonBones.Armature>(L, 2);
				DragonBones.SkinData arg1 = (DragonBones.SkinData)ToLua.CheckObject<DragonBones.SkinData>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				System.Collections.Generic.List<string> arg3 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 5, typeof(System.Collections.Generic.List<string>));
				bool o = obj.ReplaceSkin(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.ReplaceSkin");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceAnimation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.Armature arg0 = (DragonBones.Armature)ToLua.CheckObject<DragonBones.Armature>(L, 2);
				DragonBones.ArmatureData arg1 = (DragonBones.ArmatureData)ToLua.CheckObject<DragonBones.ArmatureData>(L, 3);
				bool o = obj.ReplaceAnimation(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
				DragonBones.Armature arg0 = (DragonBones.Armature)ToLua.CheckObject<DragonBones.Armature>(L, 2);
				DragonBones.ArmatureData arg1 = (DragonBones.ArmatureData)ToLua.CheckObject<DragonBones.ArmatureData>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				bool o = obj.ReplaceAnimation(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.BaseFactory.ReplaceAnimation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllDragonBonesData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
			System.Collections.Generic.Dictionary<string,DragonBones.DragonBonesData> o = obj.GetAllDragonBonesData();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllTextureAtlasData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)ToLua.CheckObject<DragonBones.BaseFactory>(L, 1);
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<DragonBones.TextureAtlasData>> o = obj.GetAllTextureAtlasData();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_autoSearch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)o;
			bool ret = obj.autoSearch;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index autoSearch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__dragonBones(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)o;
			DragonBones.DragonBones ret = obj._dragonBones;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _dragonBones on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_clock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)o;
			DragonBones.WorldClock ret = obj.clock;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clock on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_autoSearch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.autoSearch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index autoSearch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__dragonBones(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DragonBones.BaseFactory obj = (DragonBones.BaseFactory)o;
			DragonBones.DragonBones arg0 = (DragonBones.DragonBones)ToLua.CheckObject<DragonBones.DragonBones>(L, 2);
			obj._dragonBones = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _dragonBones on a nil value");
		}
	}
}


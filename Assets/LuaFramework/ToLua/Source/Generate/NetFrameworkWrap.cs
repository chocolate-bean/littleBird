//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetFrameworkWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetFramework), typeof(System.Object));
		L.RegFunction("Connect", Connect);
		L.RegFunction("BrokenConnect", BrokenConnect);
		L.RegFunction("onData", onData);
		L.RegFunction("decode", decode);
		L.RegFunction("messageDecode", messageDecode);
		L.RegFunction("SendMessage", SendMessage);
		L.RegFunction("EncodeBuffer", EncodeBuffer);
		L.RegFunction("DecodeBuffer", DecodeBuffer);
		L.RegFunction("read", read);
		L.RegFunction("writer", writer);
		L.RegFunction("SendCmdMessage", SendCmdMessage);
		L.RegFunction("New", _CreateNetFramework);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("SendByteMap", get_SendByteMap, set_SendByteMap);
		L.RegVar("RecvByteMap", get_RecvByteMap, set_RecvByteMap);
		L.RegVar("socket", get_socket, set_socket);
		L.RegVar("readbuff", get_readbuff, set_readbuff);
		L.RegVar("cache", get_cache, set_cache);
		L.RegVar("isReading", get_isReading, set_isReading);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNetFramework(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NetFramework obj = new NetFramework();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NetFramework.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			NetFramework.Connect(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BrokenConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetFramework.BrokenConnect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetFramework.onData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int decode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.List<byte> arg0 = (System.Collections.Generic.List<byte>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<byte>));
			byte[] o = NetFramework.decode(ref arg0);
			ToLua.Push(L, o);
			ToLua.PushSealed(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int messageDecode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = NetFramework.messageDecode(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray arg0 = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			NetFramework.SendMessage(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncodeBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = NetFramework.EncodeBuffer(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecodeBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = NetFramework.DecodeBuffer(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int read(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			NetFramework.read(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			ByteArray o = NetFramework.writer(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendCmdMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			NetFramework.SendCmdMessage(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SendByteMap(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NetFramework.SendByteMap);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RecvByteMap(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NetFramework.RecvByteMap);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_socket(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, NetFramework.socket);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_readbuff(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NetFramework.readbuff);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cache(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, NetFramework.cache);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isReading(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, NetFramework.isReading);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SendByteMap(IntPtr L)
	{
		try
		{
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			NetFramework.SendByteMap = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RecvByteMap(IntPtr L)
	{
		try
		{
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			NetFramework.RecvByteMap = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_socket(IntPtr L)
	{
		try
		{
			System.Net.Sockets.Socket arg0 = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 2);
			NetFramework.socket = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_readbuff(IntPtr L)
	{
		try
		{
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			NetFramework.readbuff = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cache(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<byte> arg0 = (System.Collections.Generic.List<byte>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<byte>));
			NetFramework.cache = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isReading(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			NetFramework.isReading = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

